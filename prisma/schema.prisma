// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  name          String?
  password      String
  accountType   AccountType @default(PERSONAL)
  plan          Plan      @default(FREE)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  transactions  Transaction[]
  budgets       Budget[]
  goals         Goal[]
  categories    Category[]

  @@map("users")
}

enum AccountType {
  PERSONAL
  BUSINESS
}

enum Plan {
  FREE
  PRO
  BUSINESS
}

model Transaction {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  amount      Float
  type        TransactionType
  category    String
  description String?
  date        DateTime

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([userId])
  @@index([date])
  @@map("transactions")
}

enum TransactionType {
  INCOME
  EXPENSE
}

model Budget {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  category    String
  amount      Float
  period      BudgetPeriod
  startDate   DateTime
  endDate     DateTime?

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([userId])
  @@map("budgets")
}

enum BudgetPeriod {
  WEEKLY
  MONTHLY
  YEARLY
}

model Goal {
  id            String   @id @default(cuid())
  userId        String
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  name          String
  targetAmount  Float
  currentAmount Float    @default(0)
  deadline      DateTime?
  description   String?

  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@index([userId])
  @@map("goals")
}

model Category {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  name      String
  type      TransactionType
  icon      String?
  color     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, name])
  @@index([userId])
  @@map("categories")
}
