// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String    @id @default(cuid())
  email             String    @unique
  name              String?
  password          String
  accountType       AccountType @default(PERSONAL)
  plan              Plan      @default(FREE)
  theme             String    @default("light")
  language          String    @default("en")
  currency          String    @default("EUR")
  dateFormat        String    @default("DD/MM/YYYY")
  resetToken        String?
  resetTokenExpiry  DateTime?
  emailVerified     Boolean   @default(false)
  verificationToken String?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  transactions      Transaction[]
  monthlyBudgets    MonthlyBudget[]
  subscriptions     Subscription[]
  goals             Goal[]
  categories        Category[]
  bankAccounts      BankAccount[]
  activationTokens  ActivationToken[]

  @@map("users")
}

model ActivationToken {
  id        String   @id @default(cuid())
  token     String   @unique
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  expiresAt DateTime
  createdAt DateTime @default(now())

  @@index([userId])
  @@index([token])
  @@map("activation_tokens")
}

enum AccountType {
  PERSONAL
  BUSINESS
}

enum Plan {
  FREE
  PRO
  BUSINESS
}

model Transaction {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  amount      Float
  type        TransactionType
  category    String
  description String?
  date        DateTime

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([userId])
  @@index([date])
  @@map("transactions")
}

enum TransactionType {
  INCOME
  EXPENSE
}

model MonthlyBudget {
  id                String   @id @default(cuid())
  userId            String
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  month             String   // Format: "2025-10" for October 2025
  plannedIncome     Float
  plannedExpenses   Float
  actualIncome      Float    @default(0)
  actualExpenses    Float    @default(0)

  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@unique([userId, month])
  @@index([userId])
  @@map("monthly_budgets")
}

model Subscription {
  id              String   @id @default(cuid())
  userId          String
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  name            String
  amount          Float
  billingCycle    BillingCycle
  nextBillingDate DateTime
  category        String
  isActive        Boolean  @default(true)

  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@index([userId])
  @@index([nextBillingDate])
  @@map("subscriptions")
}

enum BillingCycle {
  WEEKLY
  MONTHLY
  YEARLY
}

model Goal {
  id            String   @id @default(cuid())
  userId        String
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  name          String
  targetAmount  Float
  currentAmount Float    @default(0)
  deadline      DateTime?
  description   String?

  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@index([userId])
  @@map("goals")
}

model Category {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  name      String
  type      TransactionType
  icon      String?
  color     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, name])
  @@index([userId])
  @@map("categories")
}

model BankAccount {
  id            String   @id @default(cuid())
  userId        String
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  bankName      String
  accountType   String
  balance       Float
  accountNumber String?
  color         String   @default("bg-blue-500")

  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@index([userId])
  @@map("bank_accounts")
}
