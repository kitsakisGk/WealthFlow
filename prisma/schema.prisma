generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String            @id @default(cuid())
  email             String            @unique
  name              String?
  password          String
  plan              Plan              @default(FREE)
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  emailVerified     Boolean           @default(false)
  resetToken        String?
  resetTokenExpiry  DateTime?
  verificationToken String?
  currency          String            @default("EUR")
  dateFormat        String            @default("DD/MM/YYYY")
  language          String            @default("en")
  theme             String            @default("light")
  activationTokens  ActivationToken[]
  categories        Category[]
  goals             Goal[]
  transactions      Transaction[]

  @@map("users")
}

model ActivationToken {
  id        String   @id @default(cuid())
  token     String   @unique
  userId    String
  expiresAt DateTime
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([token])
  @@map("activation_tokens")
}

model Transaction {
  id          String          @id @default(cuid())
  userId      String
  amount      Float
  type        TransactionType
  category    String
  description String?
  date        DateTime
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  frequency   String?
  isRecurring Boolean         @default(false)
  nextDate    DateTime?
  user        User            @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([date])
  @@index([isRecurring])
  @@map("transactions")
}

model Goal {
  id            String    @id @default(cuid())
  userId        String
  name          String
  targetAmount  Float
  currentAmount Float     @default(0)
  deadline      DateTime?
  description   String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("goals")
}

model Category {
  id        String          @id @default(cuid())
  userId    String
  name      String
  type      TransactionType
  icon      String?
  color     String?
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt
  user      User            @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, name])
  @@index([userId])
  @@map("categories")
}

enum Plan {
  FREE
  PRO
}

enum TransactionType {
  INCOME
  EXPENSE
}
